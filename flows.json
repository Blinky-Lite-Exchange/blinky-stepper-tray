[
    {
        "id": "3f2da72f.995ab8",
        "type": "tab",
        "label": "Global",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5f562f66.a301e",
        "type": "tab",
        "label": "blinky-stepper-01",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5541556.c1113ac",
        "type": "tab",
        "label": "blinky-stepper-02",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c4285970.3276d8",
        "type": "tab",
        "label": "web-app",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f07e020c.d4d43",
        "type": "subflow",
        "name": "App NavBar",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "3ab766b1.558d9a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "3ab766b1.558d9a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "188d93e1.8dcc1c",
        "type": "subflow",
        "name": "HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "1da6518.fb1b7af"
                    }
                ]
            }
        ],
        "out": [],
        "env": []
    },
    {
        "id": "8857082f.cfdaa8",
        "type": "subflow",
        "name": "App CSS",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "73f0aea6.1d002"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "73f0aea6.1d002",
                        "port": 0
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "6a402d92.12d7c4",
        "type": "subflow",
        "name": "App HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b1fab3c6.1f34c"
                    }
                ]
            }
        ],
        "out": [],
        "env": []
    },
    {
        "id": "966462d2.5b098",
        "type": "subflow",
        "name": "blinky-stepper web app",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "6533b535.454c4c"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "44b51478.9c022c",
        "type": "websocket-listener",
        "path": "/blinky-stepper-01/websocket",
        "wholemsg": "false"
    },
    {
        "id": "81c09030.dd70d",
        "type": "serial-port",
        "serialport": "/dev/rfcomm0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "12",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": "1000"
    },
    {
        "id": "9ff152f7.d0768",
        "type": "websocket-listener",
        "path": "/blinky-stepper-02/websocket",
        "wholemsg": "false"
    },
    {
        "id": "ed364be7.e4b528",
        "type": "serial-port",
        "serialport": "/dev/rfcomm1",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "12",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": "1000"
    },
    {
        "id": "93049b70.2dc5c8",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "79250bf3.365cc4",
        "x": 950,
        "y": 560,
        "wires": []
    },
    {
        "id": "8cda9011.eab33",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe Settings",
        "topic": "+/+/+/setting",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "dc36009e.fdeeb"
            ]
        ]
    },
    {
        "id": "dc36009e.fdeeb",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "6c43015c.a827c"
            ]
        ]
    },
    {
        "id": "5902d0c0.241a6",
        "type": "file",
        "z": "5f562f66.a301e",
        "name": "Init Settings",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1050,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6eaa13e9.4147bc",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "init 0.5 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": ".5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "a855a806.16fa08"
            ]
        ]
    },
    {
        "id": "163af492.5e952b",
        "type": "file in",
        "z": "5f562f66.a301e",
        "name": "Init Settings",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 650,
        "y": 340,
        "wires": [
            [
                "53c95857.5f3d68"
            ]
        ]
    },
    {
        "id": "53c95857.5f3d68",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 340,
        "wires": [
            [
                "30f384ea.cf21fc",
                "561488d8.f13c78"
            ]
        ]
    },
    {
        "id": "30f384ea.cf21fc",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Save initSettings in Memory",
        "func": "msg.payload.moveMotor.value = 0;\nflow.set('device', msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 340,
        "wires": []
    },
    {
        "id": "9e954281.d9215",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Make Pretty",
        "func": "var jsonPretty = JSON.stringify(msg.payload,null,2);\nvar filename = 'cube-A-settings.json';\nreturn {topic: msg.payload, payload:jsonPretty, 'filename':filename};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 140,
        "wires": [
            [
                "5902d0c0.241a6"
            ]
        ]
    },
    {
        "id": "7461da25.d86ac4",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Settings Alarm Scan",
        "func": "scalarAlarmScan(msg.payload, 'setting');\nflow.set('device', msg.payload); \nflow.set('newSetting', 1); \nreturn msg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "9e954281.d9215"
            ]
        ]
    },
    {
        "id": "9115ea87.0ca208",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Readings Alarm Scan",
        "func": "var device = flow.get('device');\ndevice.linkQuality.value     = global.get('linkQuality');\ndevice.signalLevel.value     = global.get('signalLevel');\nscalarAlarmScan(device, 'reading');\nvar newMsg = \n{\n    topic: global.get('project') + '/' + global.get(flow.get('cubeSettings').deviceType) + '/' + global.get(flow.get('cubeSettings').deviceName) + '/reading',\n    payload: device\n}\nreturn newMsg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 600,
        "wires": [
            [
                "a3ff8e5.b79de7",
                "93049b70.2dc5c8"
            ]
        ]
    },
    {
        "id": "6c15c07a.68169",
        "type": "link in",
        "z": "5f562f66.a301e",
        "name": "cube-01 Settings In",
        "links": [
            "9e56a59.12b4158",
            "835fad53.aa97b"
        ],
        "x": 35,
        "y": 200,
        "wires": [
            [
                "8fd42733.128c98"
            ]
        ]
    },
    {
        "id": "a3ff8e5.b79de7",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Split MQTT topic",
        "func": "var mqttArray = msg.topic.split('/');\nvar device = \n{\n    project     : mqttArray[0],\n    deviceType  : mqttArray[1],\n    name        : mqttArray[2],\n    prop        : mqttArray[3],\n};\nreturn {topic : msg.topic, payload:{topic:'readings', mqttDevice : device, payload:msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 950,
        "y": 640,
        "wires": [
            [
                "107beeed.934ed1"
            ]
        ]
    },
    {
        "id": "107beeed.934ed1",
        "type": "websocket out",
        "z": "5f562f66.a301e",
        "name": "/blinky-stepper-01/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 1240,
        "y": 640,
        "wires": []
    },
    {
        "id": "8f14813b.bcdfc",
        "type": "exec",
        "z": "5f562f66.a301e",
        "command": "pm2 restart red",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1000,
        "y": 260,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ea57f5c0.b55618",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Restart Tray",
        "topic": "+/+/+/restartTray",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "808c8dcc.1f0ac"
            ]
        ]
    },
    {
        "id": "808c8dcc.1f0ac",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "225946b1.9e8b3a"
            ]
        ]
    },
    {
        "id": "960991fa.0fafe",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Check Restart Setting",
        "func": "if (msg.payload != 1) return null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 260,
        "wires": [
            [
                "8f14813b.bcdfc"
            ]
        ]
    },
    {
        "id": "8fd42733.128c98",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Filter Websocket MQTT like message",
        "func": "var msg1 = null;\nvar msg2 = null\nvar mqttArray = msg.topic.split('/');\nif (mqttArray[3] == 'restartTray')\n{\n    msg2 = msg;\n}\nelse\n{\n    msg1 = msg;\n}\n\nreturn [msg1,msg2];",
        "outputs": 2,
        "noerr": 0,
        "x": 230,
        "y": 200,
        "wires": [
            [
                "6c43015c.a827c"
            ],
            [
                "225946b1.9e8b3a"
            ]
        ]
    },
    {
        "id": "2635280b.22f548",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Make Pretty",
        "func": "return {topic: 'readFile', 'filename':flow.get('cubeSettings').filename};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 340,
        "wires": [
            [
                "163af492.5e952b"
            ]
        ]
    },
    {
        "id": "6c43015c.a827c",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Filter MQTT",
        "func": "var mqttArray = msg.topic.split('/');\nif (mqttArray[0] != global.get('project')) return null;\nif (mqttArray[1] != global.get(flow.get('cubeSettings').deviceType) ) return null;\nif (mqttArray[2] != global.get(flow.get('cubeSettings').deviceName) ) return null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 140,
        "wires": [
            [
                "7461da25.d86ac4"
            ]
        ]
    },
    {
        "id": "225946b1.9e8b3a",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Filter MQTT",
        "func": "var mqttArray = msg.topic.split('/');\nif (mqttArray[0] != global.get('project')) return null;\nif (mqttArray[1] != global.get(flow.get('cubeSettings').deviceType) ) return null;\nif (mqttArray[2] != global.get(flow.get('cubeSettings').deviceName) ) return null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "960991fa.0fafe"
            ]
        ]
    },
    {
        "id": "d3b167fa.414fa8",
        "type": "inject",
        "z": "3f2da72f.995ab8",
        "name": "PROJECT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "project",
        "payload": "PROJECT",
        "payloadType": "env",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "5497633f.4a758c"
            ]
        ]
    },
    {
        "id": "5497633f.4a758c",
        "type": "function",
        "z": "3f2da72f.995ab8",
        "name": "Save global init",
        "func": "global.set(msg.topic,msg.payload);\nglobal.set('websocketPing',0);\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "d162777.1380788",
        "type": "exec",
        "z": "3f2da72f.995ab8",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 300,
        "y": 440,
        "wires": [
            [
                "adf1efae.e4e0f"
            ],
            [],
            []
        ]
    },
    {
        "id": "77ae9cee.d460f4",
        "type": "inject",
        "z": "3f2da72f.995ab8",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "d162777.1380788"
            ]
        ]
    },
    {
        "id": "adf1efae.e4e0f",
        "type": "function",
        "z": "3f2da72f.995ab8",
        "name": "Get Signal Quality",
        "func": "var linkQuality = 0;\nvar signalLevel = -100;\nvar ssid = \"none\";\n\nvar info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nif (linkStartIndex >= 0)\n{\n    var levelStartIndex = info.indexOf('Signal level=');\n    var linkStopIndex   = info.indexOf('/70');\n    linkQuality = Number(info.substring(linkStartIndex + 13, linkStopIndex));\n    signalLevel =  Number(info.substring(levelStartIndex + 13, levelStartIndex + 17));\n    ssid = info.substring(info.indexOf('ESSID') + 7);\n    ssid = ssid.substring(0,ssid.indexOf('\"'));\n}\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nglobal.set('linkQuality',linkQuality);\nglobal.set('signalLevel', signalLevel);\nglobal.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 440,
        "wires": [
            [
                "c40dd8f4.63a9d8"
            ]
        ]
    },
    {
        "id": "f56d3371.a7153",
        "type": "inject",
        "z": "3f2da72f.995ab8",
        "name": "DEVICETYPEA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "deviceTypeA",
        "payload": "DEVICETYPEA",
        "payloadType": "env",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "5497633f.4a758c"
            ]
        ]
    },
    {
        "id": "c09bc160.3a3f1",
        "type": "inject",
        "z": "3f2da72f.995ab8",
        "name": "DEVICENAMEA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "deviceNameA",
        "payload": "DEVICENAMEA",
        "payloadType": "env",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "5497633f.4a758c"
            ]
        ]
    },
    {
        "id": "c40dd8f4.63a9d8",
        "type": "link out",
        "z": "3f2da72f.995ab8",
        "name": "Get Signal Quality out",
        "links": [
            "6d0d620b.cc2c0c"
        ],
        "x": 615,
        "y": 440,
        "wires": []
    },
    {
        "id": "a179fc1c.4fe37",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Read Serial Handshake",
        "func": "if (flow.get('device') == undefined) return null;\nif (flow.get('newSetting') == undefined) return null;\nvar ib;\nvar dataView     = new DataView(new ArrayBuffer(4));\nvar newSettingDone = 0;\nvar cubeInit = 0;\n\nfor (ib = 0; ib < 4; ++ib)   dataView.setUint8(ib, msg.payload[0 * 4 + 3 - ib]);\ncubeInit = dataView.getInt32(0);\nfor (ib = 0; ib < 4; ++ib)   dataView.setUint8(ib, msg.payload[1 * 4 + 3 - ib]);\nnewSettingDone = dataView.getInt32(0);\n\nfor (ib = 0; ib < 4; ++ib)   dataView.setUint8(ib, msg.payload[2 * 4 + 3 - ib]);\nflow.get('device').nrevs.value = dataView.getFloat32(0);\nvar newSettingDoneMsg = {topic:'newSettingDone', payload:false} \nif (newSettingDone > 0) \n{\n    flow.set('newSetting',0);\n    flow.get('device').moveMotor.value = 0;\n    flow.get('device').resetNrevReading.value = 0;\n    newSettingDoneMsg.payload = true;\n}\nif(cubeInit == 1) \n{\n    flow.get('device').moveMotor.value = 0;\n    flow.set('newSetting',1);\n}\n\nreturn newSettingDoneMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 660,
        "wires": [
            [
                "716f188f.a84c68",
                "41f6bebd.1c83"
            ]
        ]
    },
    {
        "id": "716f188f.a84c68",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "CreateSettings",
        "func": "var bufsize = 36;\nvar buffer = new ArrayBuffer(bufsize);\nvar settingsView = new DataView(buffer);\nvar device = flow.get('device');\nsettingsView.setInt32(0, flow.get('newSetting'), true);\nsettingsView.setInt32(4, device.moveMotor.value, true);\nsettingsView.setInt32(8, device.resetNrevReading.value, true);\nsettingsView.setInt32(12, device.noStepsToTurn.value, true);\nsettingsView.setInt32(16, device.stepDelayuS.value, true);\nsettingsView.setInt32(20, device.stayAwakeAfterRotation.value, true);\nsettingsView.setInt32(24, device.resolution.value, true);\nsettingsView.setInt32(28, device.delayAfterRotationmS.value, true);\nsettingsView.setInt32(32, device.loopDelay.value, true);\n\nreturn {topic:'settings',payload:Buffer.from(buffer)};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 740,
        "wires": [
            [
                "2fe75b8.09b33a4"
            ]
        ]
    },
    {
        "id": "58b8d1f6.bdc9c",
        "type": "serial in",
        "z": "5f562f66.a301e",
        "name": "",
        "serial": "81c09030.dd70d",
        "x": 90,
        "y": 660,
        "wires": [
            [
                "a179fc1c.4fe37"
            ]
        ]
    },
    {
        "id": "2fe75b8.09b33a4",
        "type": "serial out",
        "z": "5f562f66.a301e",
        "name": "",
        "serial": "81c09030.dd70d",
        "x": 680,
        "y": 740,
        "wires": []
    },
    {
        "id": "561488d8.f13c78",
        "type": "debug",
        "z": "5f562f66.a301e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 380,
        "wires": []
    },
    {
        "id": "a31d0f3d.8aa6a",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Test Motor",
        "func": "flow.get('device').moveMotor.value = 1;\nflow.set('newSetting',1);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 920,
        "wires": []
    },
    {
        "id": "21f9bde3.8eb742",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 920,
        "wires": [
            [
                "a31d0f3d.8aa6a"
            ]
        ]
    },
    {
        "id": "3ab766b1.558d9a",
        "type": "template",
        "z": "f07e020c.d4d43",
        "name": "navBar",
        "field": "payload.navBar",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- navBar -->\n    <div class=\"jumbotron\" width=\"100%\">\n        <table width=\"100%\">\n            <tr>\n                <td style=\"text-align:left; vertical-align:middle;\"  width=\"20%\">\n                    <a href='https://www.blinky-lite.io/' target='_blank'>\n                        <img src=\"/img/BlinkyLogo.gif\" height=\"75px\"/>\n                    </a>                \n                </td>\n                <td width=\"60%\" style=\"text-align:center; vertical-align:middle;\">\n                    <h1 class=\"jumbotron-title big-text bold-text\">\n                        <img src=\"/img/{{{payload.navBarIcon}}}\" height=\"75px\" style=\"padding-right:20px;\"/><span>{{{payload.title}}}</span>\n                    </h1>\n                </td>\n                <td style=\"text-align:right; vertical-align:middle;\" width=\"20%\">\n                    <a href='/'><img src=\"/img/home.png\" height=\"75px\"/></a>\n                </td>\n            </tr>\n        </table>\n    </div>\n",
        "output": "str",
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4109bee6.c2294",
        "type": "template",
        "z": "188d93e1.8dcc1c",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.html.websocket}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>",
        "output": "str",
        "x": 910,
        "y": 40,
        "wires": [
            [
                "fd2bae7.8730f5"
            ]
        ]
    },
    {
        "id": "ed534f2d.ee021",
        "type": "template",
        "z": "188d93e1.8dcc1c",
        "name": "Foot",
        "field": "payload.foot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"messageDialog\" title=\"Message\" class='card'>\n        <p class='card-title' id='messageDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='messageDialogText'>Text</p>\n        </div>\n    </div>\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>",
        "output": "str",
        "x": 610,
        "y": 40,
        "wires": [
            [
                "20e2a34a.7be64c"
            ]
        ]
    },
    {
        "id": "91ca4a7b.9010f8",
        "type": "template",
        "z": "188d93e1.8dcc1c",
        "name": "Head",
        "field": "payload.head",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui-timepicker-addon.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script src=\"/jquery/jquery-ui-timepicker-addon.js\"></script>\n    <script src=\"/scripts/plotly-latest.min.js\"></script>\n    <script src=\"/scripts/visDist/vis.js\"></script>\n    <style>\n{{{payload.css}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>",
        "output": "str",
        "x": 490,
        "y": 40,
        "wires": [
            [
                "ed534f2d.ee021"
            ]
        ]
    },
    {
        "id": "fd2bae7.8730f5",
        "type": "http response",
        "z": "188d93e1.8dcc1c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 40,
        "wires": []
    },
    {
        "id": "85f6e038.56c86",
        "type": "template",
        "z": "188d93e1.8dcc1c",
        "name": "Utility Scripts",
        "field": "payload.utilityScripts",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        var ws;\n        var userID = -1;\n        var useWebSocketsFlag = true;\n        var projectName = '{{{payload.projectname}}}';\n        var heartBeatImage = false;\n        var wsUri = '';\n\n        function useWebSockets(webSocketsFlag)\n        {\n            useWebSocketsFlag = webSocketsFlag;\n        }\n        function wsConnectC()\n        {\n            if (!useWebSocketsFlag)\n            {\n                return;\n            }\n            if (wsUri.length < 1)\n            {\n                var uri = window.location.href.split('://');\n                var wslead = 'ws://';\n                if (uri[0] == 'https') wslead = 'wss://';\n                var questionLocation = uri[1].indexOf('?');\n                if (questionLocation >= 0)\n                {\n                    uri[1] = uri[1].substring(0,questionLocation);\n//                    console.log(uri[1]);\n                }\n                if (uri[1].indexOf('/') < (uri[1].length - 1))\n                {\n                    wsUri = wslead + uri[1] + '/websocket';\n                }\n                else\n                {\n                    wsUri = wslead + uri[1] + 'websocket';\n                }\n            }\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function(event)\n            {\n                onWebSocketMessage(JSON.parse(event.data));\n        \n            };\n            ws.onopen = function()\n            {\n                console.log(\"Websocket connected\");\n                $('#webSocketStatus').html('Open');\n                $('#reOpenWebSocketButton').hide();\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n                onWebSocketOpen();\n            };\n            ws.onclose = function()\n            {\n                console.log(\"Websocket closed\");\n                $('#webSocketStatus').html('Closed');\n                $('#reOpenWebSocketButton').show();\n                $('#webSocketStatusCard').show();\n                $('#webSocketStatusRow').css('padding-bottom','25px');\n                onWebSocketClose();\n            };\n        }\n        function sendWebSocketMessageObject(message)\n        {\n            ws.send(JSON.stringify(message));\n        }\n\n        function getRandomInt(max)\n        {\n          return Math.floor(Math.random() * Math.floor(max));\n        }\n        $( document ).ready(function()\n        {\n            userID  = {{{payload.userID}}};\n            if (!useWebSocketsFlag)\n            {\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n            }\n            wsConnectC();\n            onDocumentReady();\n        });\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n            $( \"#messageDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:[]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }\n        function messageDialog(headerText, title, text)\n        {\n            $( \"#messageDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#messageDialogTitle\" ).html(title);\n            $( \"#messageDialogText\" ).html(text);\n            $( \"#messageDialog\" ).dialog( \"open\" );\n        }\n        function sendSettingToMqtt(mqttMessage)\n        {\n            var socketMessage = \n            {\n                topic       : 'sendSettingToMqtt',\n                mqttMessage : mqttMessage,\n                userID      : userID\n            };\n            sendWebSocketMessageObject({topic : 'sendSettingToMqtt', mqttMessage : mqttMessage, userID : userID});\n        }\n        function heartbeat()\n        {\n            heartBeatImage = !heartBeatImage;\n            var heartBeatImageSrc = '/img/heartRed.png';\n            if (heartBeatImage) heartBeatImageSrc = '/img/heartPink.png';\n            $('#heartBeatID').attr('src',heartBeatImageSrc);\n        }\n",
        "output": "str",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "91ca4a7b.9010f8"
            ]
        ]
    },
    {
        "id": "1da6518.fb1b7af",
        "type": "function",
        "z": "188d93e1.8dcc1c",
        "name": "Create userID",
        "func": "function getRandomInt(max)\n{\n  return Math.floor(Math.random() * Math.floor(max));\n}\nmsg.payload['userID'] = getRandomInt(32768);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 40,
        "wires": [
            [
                "85f6e038.56c86"
            ]
        ]
    },
    {
        "id": "20e2a34a.7be64c",
        "type": "template",
        "z": "188d93e1.8dcc1c",
        "name": "html.websocket",
        "field": "payload.html.websocket",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- websocket status HTML -->\n    <div width=\"100%\">\n        <div class='row' id='webSocketStatusRow' style='padding-bottom: 0px;'>\n            <div class='col-md-12' align='center'>\n\n                <div class='card' id='webSocketStatusCard' >\n                    <p class='card-title'>Web Socket Status</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Websocket Status</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <button class='btn card-button btn-block big-text' id='reOpenWebSocketButton' onclick=\"wsConnectC()\">Re-open</button>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='webSocketStatus' >Closed</span>\n                                   </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 760,
        "y": 40,
        "wires": [
            [
                "4109bee6.c2294"
            ]
        ]
    },
    {
        "id": "73f0aea6.1d002",
        "type": "template",
        "z": "8857082f.cfdaa8",
        "name": "CSS",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        :root \n        {\n          --color1: #415c71;\n          --color2: #547792;\n          --color3: #9eb5c7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white !important;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        \n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color: white;\n          padding-top:25px;\n          padding-bottom:25px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n       }\n        .card\n        {\n          background-color: var(--color2) !important;\n          text-align: center;\n        }\n        .card-body\n        {\n          background-color: var(--color3);;\n        }\n        .card-button\n        {\n          color: var(--color5) !important;\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .danger-card\n        {\n          background-color: yellow !important;\n          text-align: center;\n        }\n        .danger-card-body\n        {\n          background-color: yellow;\n        }\n        .danger-card-button\n        {\n          color: yellow !important;\n          background-color: red !important;\n          font-weight: bold;\n        }\n        .danger-card-title\n        {\n          color: red;\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .danger-card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .tableHeading\n        {\n          color:var(--container-title-color);\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-size: var(--big-text-size);\n        }\n       .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n        .ui-slider\n        {\n            height: 90px;\n            background-color: var(--color1) !important;\n        }\n        .ui-slider .ui-slider-handle \n        {\n            height: 100px;\n            width: 100px;\n            background-color: var(--color5) !important;\n        }\n        .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n        .custom-select\n        {\n            color: black;\n            background-color: white;\n            height:80px;\n            line-height:70px;\n        }\n",
        "output": "str",
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b1fab3c6.1f34c",
        "type": "subflow:8857082f.cfdaa8",
        "z": "6a402d92.12d7c4",
        "name": "",
        "env": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "e205aa81.b2b958"
            ]
        ]
    },
    {
        "id": "133517a3.6ba2b8",
        "type": "subflow:188d93e1.8dcc1c",
        "z": "6a402d92.12d7c4",
        "name": "",
        "x": 490,
        "y": 80,
        "wires": []
    },
    {
        "id": "e205aa81.b2b958",
        "type": "subflow:f07e020c.d4d43",
        "z": "6a402d92.12d7c4",
        "name": "",
        "env": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "133517a3.6ba2b8"
            ]
        ]
    },
    {
        "id": "1482e22f.57fa2e",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/blinky-stepper-01",
        "url": "/blinky-stepper-01",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "71ce0943.81bf18"
            ]
        ]
    },
    {
        "id": "71ce0943.81bf18",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = global.get('deviceNameA')\nmsg.payload['script']['deviceType'] = global.get('deviceTypeA');\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "64e82a8b.310344"
            ]
        ]
    },
    {
        "id": "c76a9544.852e88",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Blinky Stepper {{{payload.script.name}}}",
        "output": "str",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "7bb92ce8.d547e4"
            ]
        ]
    },
    {
        "id": "f078068d.c90bc8",
        "type": "subflow:6a402d92.12d7c4",
        "z": "966462d2.5b098",
        "name": "",
        "x": 1210,
        "y": 200,
        "wires": []
    },
    {
        "id": "450b0136.7ccbd",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width=\"100%\">\n        <div class='row' style='padding-top:50px;padding-bottom:80px;'>\n            <div class='col-md-12' align='center'>\n                <table  width='100%'>\n                   <tr>\n                        <td width='20%' align='left'> </td>\n                        <td width='60%' align='center'>\n                            <button class='btn btn-block card-button big-text' id=\"moveMotorButton\" onclick=\"moveMotor()\" >Move</button>\n                        </td>\n                        <td width='20%' align='left'> </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 10px;'>\n            <div class='col-md-12' align='center'>\n{{{payload.html.controls}}}\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 890,
        "y": 200,
        "wires": [
            [
                "f078068d.c90bc8"
            ]
        ]
    },
    {
        "id": "6533b535.454c4c",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "stairsYellow.png",
        "output": "str",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "c76a9544.852e88"
            ]
        ]
    },
    {
        "id": "7bb92ce8.d547e4",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        var restfulDevice = \n        {\n            deviceType  : '{{{payload.script.deviceType}}}',\n            name        : '{{{payload.script.name}}}',\n            project     : '{{{payload.script.project}}}'\n        };\n        var mqttDevice = null;\n        var device = null;\n        var noStepsToTurnChanged = false;\n        var stepDelayuSChanged = false;\n        var delayAfterRotationmSChanged = false;\n        var loopDelayChanged = false;\n        \n\n        var pingInterval = 5000;\n        var lastPing = 0;\n\n        useWebSockets(true);\n        function onDocumentReady()\n        {\n            $('#noStepsToTurnButtonId').hide();\n            $('#stepDelayuSButtonId').hide();\n            $('#delayAfterRotationmSButtonId').hide();\n            $('#loopDelayButtonId').hide();\n            $('#moveMotorButton').prop('disabled', true);\n            \n            setInterval(function()\n            {\n                var now = new Date().getTime();\n                if ((now - lastPing) > pingInterval)\n                {\n                    lastPing = now;\n                    sendWebSocketMessageObject({topic : 'ping', userID : userID, 'restfulDevice': restfulDevice});\n                }\n            }, 1000);\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n//            wsConnectC();\n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if (msg.mqttDevice.name == restfulDevice.name)\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        device = msg.payload;\n                        mqttDevice = msg.mqttDevice;\n                        updateDmaReadings();\n                    }\n                    break;\n                default:\n                // code block\n            }\n        }\n// Update Readings Javascript\n        function updateDmaReadings()\n        {\n            if (!noStepsToTurnChanged) $('#noStepsToTurnInputId').val(device.noStepsToTurn.value);\n            if (!stepDelayuSChanged)   $('#stepDelayuSInputId').val(device.stepDelayuS.value);\n            if (!delayAfterRotationmSChanged)   $('#delayAfterRotationmSInputId').val(device.delayAfterRotationmS.value);\n            if (!loopDelayChanged)   $('#loopDelayInputId').val(device.loopDelay.value);\n            \n            $('#resolutionInputId').val(device.resolution.value);\n            $('#stayAwakeAfterRotationInputId').val(device.stayAwakeAfterRotation.value);\n            $('#resetNrevReadingInputId').val(device.resetNrevReading.value);\n\n            $('#nrevsId').text((Math.round(100 * device.nrevs.value) / 100).toString());\n            if (device.moveMotor.value < 1) $('#moveMotorButton').prop('disabled', false);\n        }\n        function setScalarValue(settingValue, attrName)\n        {\n            var settingAttr = device[attrName];\n            if ( (settingAttr.alarm.limits.lolo <= settingValue) && (settingValue <= settingAttr.alarm.limits.hihi) )\n            {\n                settingAttr.value = settingValue;\n                var mqttMessage = \n                {\n                    topic   : mqttDevice.project + '/' +  mqttDevice.deviceType + '/' +  mqttDevice.name + '/setting',\n                    payload :  device\n                };\n                sendSettingToMqtt(mqttMessage);\n            } \n            else\n            {\n                acknowledgeDialog('Acknowledge', 'Error', 'Entry outside range! (' + settingAttr.alarm.limits.lolo.toString() + '-' + settingAttr.alarm.limits.hihi.toString() + ' ' + settingAttr.unit);\n            }\n        }\n        function noStepsToTurnChange()\n        {\n            noStepsToTurnChanged = true;\n            $('#noStepsToTurnButtonId').show();\n        }\n        function stepDelayuSChange()\n        {\n            stepDelayuSChanged = true;\n            $('#stepDelayuSButtonId').show();\n        }\n        function delayAfterRotationmSChange()\n        {\n            delayAfterRotationmSChanged = true;\n            $('#delayAfterRotationmSButtonId').show();\n        }\n        function loopDelayChange()\n        {\n            loopDelayChanged = true;\n            $('#loopDelayButtonId').show();\n        }\n        function noStepsToTurn()\n        {\n            $('#noStepsToTurnButtonId').hide();\n            if (isNaN($('#noStepsToTurnInputId').val()))\n            {\n                noStepsToTurnChanged = false;\n                return;\n            }\n            setScalarValue(Number($('#noStepsToTurnInputId').val()), 'noStepsToTurn');\n            noStepsToTurnChanged = false;\n        }\n        function stepDelayuS()\n        {\n            $('#stepDelayuSButtonId').hide();\n            if (isNaN($('#stepDelayuSInputId').val()))\n            {\n                stepDelayuSChanged = false;\n                return;\n            }\n            setScalarValue(Number($('#stepDelayuSInputId').val()), 'stepDelayuS');\n            stepDelayuSChanged = false;\n        }\n        function delayAfterRotationmS()\n        {\n            $('#delayAfterRotationmSButtonId').hide();\n            if (isNaN($('#delayAfterRotationmSInputId').val()))\n            {\n                delayAfterRotationmSChanged = false;\n                return;\n            }\n            setScalarValue(Number($('#delayAfterRotationmSInputId').val()), 'delayAfterRotationmS');\n            delayAfterRotationmSChanged = false;\n        }\n        function loopDelay()\n        {\n            $('#loopDelayButtonId').hide();\n            if (isNaN($('#loopDelayInputId').val()))\n            {\n                loopDelayChanged = false;\n                return;\n            }\n            setScalarValue(Number($('#loopDelayInputId').val()), 'loopDelay');\n            loopDelayChanged = false;\n        }\n        function moveMotor()\n        {\n            setScalarValue(1, 'moveMotor');\n            $('#moveMotorButton').prop('disabled', true);\n        }\n        function resolution()\n        {\n            if (isNaN($('#resolutionInputId').val()))\n            {\n                 return;\n            }\n            setScalarValue(Number($('#resolutionInputId').val()), 'resolution');\n        }\n        function stayAwakeAfterRotation()\n        {\n            if (isNaN($('#stayAwakeAfterRotationInputId').val()))\n            {\n                 return;\n            }\n            setScalarValue(Number($('#stayAwakeAfterRotationInputId').val()), 'stayAwakeAfterRotation');\n        }\n         function resetNrevReading()\n        {\n            if (isNaN($('#resetNrevReadingInputId').val()))\n            {\n                 return;\n            }\n            setScalarValue(Number($('#resetNrevReadingInputId').val()), 'resetNrevReading');\n        }\n",
        "output": "str",
        "x": 610,
        "y": 80,
        "wires": [
            [
                "d34771f6.a55f6"
            ]
        ]
    },
    {
        "id": "cf60059e.7e53a8",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.stripChartWidget}}}\n{{{payload.script.global}}}\n{{{payload.script.horzbarWidget}}}\n{{{payload.script.editDevice}}}\n{{{payload.script.dangerZone}}}\n",
        "output": "str",
        "x": 600,
        "y": 200,
        "wires": [
            [
                "ac502b1d.d51818"
            ]
        ]
    },
    {
        "id": "1c06ea5e.a92546",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "script.dangerZone",
        "field": "payload.script.dangerZone",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// dangerZone JavaScript\n        function restartTray()\n        {\n            optionDialog('Danger! Will Robinson, Danger!', 'Restart Tray', 'This should not be done lightly', ['Reset Tray','Cancel'], [function (){restartTrayButtonPress();}, function (){$( \"#optionDialog\" ).dialog( \"close\" );}]);\n        }\n        function restartTrayButtonPress()\n        {\n            $( \"#optionDialog\" ).dialog( \"close\" );\n            var mqttMessage = \n            {\n                topic   : restfulDevice.project + '/' +  restfulDevice.deviceType + '/' +  restfulDevice.name + '/restartTray',\n                payload :  1\n            };\n            sendSettingToMqtt(mqttMessage);\n        }\n",
        "output": "str",
        "x": 630,
        "y": 160,
        "wires": [
            [
                "cf60059e.7e53a8"
            ]
        ]
    },
    {
        "id": "b37ca0a6.4938b",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "html.dangerZone",
        "field": "payload.html.dangerZone",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='danger-card'>\n                    <div class='row'>\n                        <div class='col-md-2'>\n                        </div>\n                        <div class='col-md-8'>\n                            <p class='danger-card-title'>Danger Zone</p>\n                         </div>\n                        <div class='col-md-2'>\n                        </div>\n                    </div>\n                    <div class='danger-card-body' align=\"center\">\n                        <div class='row'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='100%' align=\"center\">\n                                        <button class='btn danger-card-button big-text' id=\"restartTrayButton\" onclick=\"restartTray()\" >Restart Tray</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 930,
        "y": 160,
        "wires": [
            [
                "450b0136.7ccbd"
            ]
        ]
    },
    {
        "id": "74981fb8.4f6d9",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 910,
        "y": 120,
        "wires": [
            [
                "b37ca0a6.4938b"
            ]
        ]
    },
    {
        "id": "d34771f6.a55f6",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "script.editDevice",
        "field": "payload.script.editDevice",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Edit Temp JavaScript\n       $( function() \n        {\n            $( \"#editDeviceDialog\" ).dialog(\n                {\n//                    closeOnEscape: false,\n//                    open: function(event, ui) {$(\".ui-dialog-titlebar-close\", ui.dialog | ui).hide();},\n                    width:    640,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Set\",\n                            click: function() {setDevice(); $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() \n                            {\n                                $( this ).dialog( \"close\" ); \n                            },\n                            showText: false\n                        }\n                    ]\n                });\n        } );\n        function editDevice(attrName)\n        {\n            $( \"#editDeviceDialog\" ).dialog( \"option\", \"title\", \"Edit\"); \n            editedAttribute = attrName;\n            $( \"#editDeviceDialogAttribute\").html(attrName);\n\n            var attr = device[attrName];\n            $( \"#loloAlarm\").val(attr.alarm.limits.lolo);\n            $( \"#lowAlarm\").val(attr.alarm.limits.low);\n            $( \"#highAlarm\").val(attr.alarm.limits.high);\n            $( \"#hihiAlarm\").val(attr.alarm.limits.hihi);\n            $( \"#notifyName\").val(attr.alarm.notify.name);\n            $( \"#notifyNumber\").val(attr.alarm.notify.number);\n\n            $( \"#editDeviceDialog\" ).dialog( \"open\" );\n        }\n        function setDevice()\n        {\n            var attr = device[editedAttribute];\n            if (isNaN($('#loloAlarm').val()) \n                || isNaN($('#lowAlarm').val()) \n                || isNaN($('#highAlarm').val()) \n                || isNaN($('#hihiAlarm').val()))\n            {\n                acknowledgeDialog('Error', 'Entry not a number!', editedAttribute);\n                editedAttribute = '';\n                return;\n            }\n            editedAttribute = '';\n\n            attr.alarm.limits.lolo = Number($( \"#loloAlarm\").val());\n            attr.alarm.limits.low = Number($( \"#lowAlarm\").val());\n            attr.alarm.limits.high = Number($( \"#highAlarm\").val());\n            attr.alarm.limits.hihi = Number($( \"#hihiAlarm\").val());\n            attr.alarm.notify.number =  $( \"#notifyNumber\").val();\n            attr.alarm.notify.name = $( \"#notifyName\").val();\n            var mqttMessage = \n            {\n                topic   : mqttDevice.project + '/' +  mqttDevice.deviceType + '/' +  mqttDevice.name + '/setting',\n                payload :  device\n            };\n            sendSettingToMqtt(mqttMessage);\n        }\n",
        "output": "str",
        "x": 620,
        "y": 120,
        "wires": [
            [
                "1c06ea5e.a92546"
            ]
        ]
    },
    {
        "id": "ac502b1d.d51818",
        "type": "template",
        "z": "966462d2.5b098",
        "name": "html.controls",
        "field": "payload.html.controls",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>Controls</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <div class=\"container-fluid \" align=\"center\" style='padding-top: 0px;'>\n                                <div class='row' style='padding-bottom: 15px;'>\n                                    <div class=\"container-fluid \" align=\"center\">\n                                        <table  width='100%'>\n                                            <tr>\n                                                <td width='60%'>\n                                                    <span class='card-text' >Motor location</span>\n                                                </td>\n                                                <td width='20%'>\n                                                    <span class='card-text' id=\"nrevsId\" >0</span>\n                                                </td>\n                                                <td width='20%'>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                    </div>\n                                </div>\n                                <div class='row' style='padding-bottom: 15px;'>\n                                    <div class=\"container-fluid \" align=\"center\">\n                                        <table  width='100%'>\n                                            <tr>\n                                                <td width='60%'>\n                                                    <span class='card-text' >No. Of Steps</span>\n                                                </td>\n                                                <td width='20%'>\n                                                    <input id=\"noStepsToTurnInputId\" type=\"text\" value=\"0\" class=\"big-text\"  size=\"8\" oninput=\"noStepsToTurnChange()\"/>\n                                                </td>\n                                                <td width='20%'>\n                                                    <button class='btn btn-block card-button big-text' id=\"noStepsToTurnButtonId\" onclick=\"noStepsToTurn()\" >&#10003;</button>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                    </div>\n                                </div>\n                                <div class='row' style='padding-bottom: 15px;'>\n                                    <div class=\"container-fluid \" align=\"center\">\n                                        <table  width='100%'>\n                                            <tr>\n                                                <td width='60%'>\n                                                    <span class='card-text' >Step Delay (uS)</span>\n                                                </td>\n                                                <td width='20%'>\n                                                    <input id=\"stepDelayuSInputId\" type=\"text\" value=\"0\" class=\"big-text\"  size=\"8\" oninput=\"stepDelayuSChange()\"/>\n                                                </td>\n                                                <td width='20%'>\n                                                    <button class='btn btn-block card-button big-text' id=\"stepDelayuSButtonId\" onclick=\"stepDelayuS()\" >&#10003;</button>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                    </div>\n                                </div>\n                                <div class='row' style='padding-bottom: 15px;'>\n                                    <div class=\"container-fluid \" align=\"center\">\n                                        <table  width='100%'>\n                                            <tr>\n                                                <td width='60%'>\n                                                    <span class='card-text' >Delay After Rotation (mS)</span>\n                                                </td>\n                                                <td width='20%'>\n                                                    <input id=\"delayAfterRotationmSInputId\" type=\"text\" value=\"0\" class=\"big-text\"  size=\"8\" oninput=\"delayAfterRotationmSChange()\"/>\n                                                </td>\n                                                <td width='20%'>\n                                                    <button class='btn btn-block card-button big-text' id=\"delayAfterRotationmSButtonId\" onclick=\"delayAfterRotationmS()\" >&#10003;</button>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                    </div>\n                                </div>\n                                <div class='row' style='padding-bottom: 15px;'>\n                                    <div class=\"container-fluid \" align=\"center\">\n                                        <table  width='100%'>\n                                            <tr>\n                                                <td width='60%'>\n                                                    <span class='card-text' >Loop Delay (mS)</span>\n                                                </td>\n                                                <td width='20%'>\n                                                    <input id=\"loopDelayInputId\" type=\"text\" value=\"0\" class=\"big-text\"  size=\"8\" oninput=\"loopDelayChange()\"/>\n                                                </td>\n                                                <td width='20%'>\n                                                    <button class='btn btn-block card-button big-text' id=\"loopDelayButtonId\" onclick=\"loopDelay()\" >&#10003;</button>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                    </div>\n                                </div>\n                                <div class='row' style='padding-bottom: 15px;'>\n                                    <div class=\"container-fluid \" align=\"center\">\n                                        <table  width='100%'>\n                                            <tr>\n                                                <td width='60%'>\n                                                    <span class='card-text' >Resolution</span>\n                                                </td>\n                                                <td width='20%'>\n                                                    <select class=\"custom-select big-text\"  id=\"resolutionInputId\" onchange=\"resolution()\" >\n                                                        <option value=\"0\">200</option>\n                                                        <option value=\"1\">400</option>\n                                                        <option value=\"2\">800</option>\n                                                        <option value=\"3\">1600</option>\n                                                        <option value=\"4\">3200</option>\n                                                        <option value=\"5\">6400</option>\n                                                    </select>\n                                                </td>\n                                                <td width='20%'>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                    </div>\n                                </div>\n                                <div class='row' style='padding-bottom: 15px;'>\n                                    <div class=\"container-fluid \" align=\"center\">\n                                        <table  width='100%'>\n                                            <tr>\n                                                <td width='60%'>\n                                                    <span class='card-text' >Keep Awake</span>\n                                                </td>\n                                                <td width='20%'>\n                                                    <select class=\"custom-select big-text\"  id=\"stayAwakeAfterRotationInputId\" onchange=\"stayAwakeAfterRotation()\" >\n                                                        <option value=\"0\">No</option>\n                                                        <option value=\"1\">Yes</option>\n                                                    </select>\n                                                </td>\n                                                <td width='20%'>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                    </div>\n                                </div>\n                                <div class='row' style='padding-bottom: 15px;'>\n                                    <div class=\"container-fluid \" align=\"center\">\n                                        <table  width='100%'>\n                                            <tr>\n                                                <td width='60%'>\n                                                    <span class='card-text' >Reset Readback</span>\n                                                </td>\n                                                <td width='20%'>\n                                                    <select class=\"custom-select big-text\"  id=\"resetNrevReadingInputId\" onchange=\"resetNrevReading()\" >\n                                                        <option value=\"0\">No</option>\n                                                        <option value=\"1\">Reset</option>\n                                                    </select>\n                                                </td>\n                                                <td width='20%'>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                   </div>\n                </div>\n                <div id=\"editDeviceDialog\" title=\"Edit Device\" class='card'>\n                    <p class='card-title' id='editDeviceDialogAttribute'>Attribute</p>\n                    <div class='card-body'>\n                        <table>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">LoLo</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"loloAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">LOW</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"lowAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">HIGH</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"highAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">HiHi</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"hihiAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">Notify Name</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"notifyName\" type=\"text\" value=\"\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">Notify Number</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"notifyNumber\" type=\"text\" value=\"\" /></td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>",
        "output": "str",
        "x": 910,
        "y": 80,
        "wires": [
            [
                "74981fb8.4f6d9"
            ]
        ]
    },
    {
        "id": "41f6bebd.1c83",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Check for new data",
        "func": "if (!msg.payload) return null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 600,
        "wires": [
            [
                "9115ea87.0ca208"
            ]
        ]
    },
    {
        "id": "75bcac45.dd63c4",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 970,
        "y": 900,
        "wires": [
            [
                "f167b45d.9136c8"
            ]
        ]
    },
    {
        "id": "fcf8eef6.6c823",
        "type": "websocket in",
        "z": "5f562f66.a301e",
        "name": "/blinky-stepper-01/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 780,
        "y": 900,
        "wires": [
            [
                "75bcac45.dd63c4"
            ]
        ]
    },
    {
        "id": "f167b45d.9136c8",
        "type": "switch",
        "z": "5f562f66.a301e",
        "name": "topics",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sendSettingToMqtt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 900,
        "wires": [
            [
                "edc96358.b76e2"
            ],
            [
                "6852509e.5b0f8"
            ]
        ]
    },
    {
        "id": "9b6cce5d.a32f9",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 960,
        "wires": [
            [
                "d756274b.13ae38"
            ]
        ]
    },
    {
        "id": "6216305.95a15d",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe Ping",
        "topic": "+/+/+/ping",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 740,
        "y": 960,
        "wires": [
            [
                "9b6cce5d.a32f9"
            ]
        ]
    },
    {
        "id": "d756274b.13ae38",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Filter MQTT",
        "func": "var mqttArray = msg.topic.split('/');\nif (mqttArray[0] != global.get('project')) return null;\nif (mqttArray[1] != global.get(flow.get('cubeSettings').deviceType) ) return null;\nif (mqttArray[2] != global.get(flow.get('cubeSettings').deviceName) ) return null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 960,
        "wires": [
            [
                "6852509e.5b0f8"
            ]
        ]
    },
    {
        "id": "6852509e.5b0f8",
        "type": "link out",
        "z": "5f562f66.a301e",
        "name": "Ping Out",
        "links": [
            "d903cc91.650d9"
        ],
        "x": 1335,
        "y": 960,
        "wires": []
    },
    {
        "id": "d903cc91.650d9",
        "type": "link in",
        "z": "5f562f66.a301e",
        "name": "Ping In",
        "links": [
            "6852509e.5b0f8"
        ],
        "x": 635,
        "y": 540,
        "wires": [
            [
                "9115ea87.0ca208"
            ]
        ]
    },
    {
        "id": "edc96358.b76e2",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "sendSettingToMqtt",
        "func": "return {\n    topic   : msg.payload.mqttMessage.topic, \n    payload : msg.payload.mqttMessage.payload, \n    userID  : msg.payload.userID };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1390,
        "y": 900,
        "wires": [
            [
                "835fad53.aa97b"
            ]
        ]
    },
    {
        "id": "835fad53.aa97b",
        "type": "link out",
        "z": "5f562f66.a301e",
        "name": "Webs Scoket Settings Out",
        "links": [
            "6c15c07a.68169"
        ],
        "x": 1525,
        "y": 900,
        "wires": []
    },
    {
        "id": "5eabddbd.8bb404",
        "type": "inject",
        "z": "3f2da72f.995ab8",
        "name": "DEVICETYPEB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "deviceTypeB",
        "payload": "DEVICETYPEB",
        "payloadType": "env",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "5497633f.4a758c"
            ]
        ]
    },
    {
        "id": "5fc2582.8bd39a8",
        "type": "inject",
        "z": "3f2da72f.995ab8",
        "name": "DEVICENAMEB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "deviceNameB",
        "payload": "DEVICENAMEB",
        "payloadType": "env",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "5497633f.4a758c"
            ]
        ]
    },
    {
        "id": "64e82a8b.310344",
        "type": "subflow:966462d2.5b098",
        "z": "c4285970.3276d8",
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "9c96eade.361a28",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/blinky-stepper-02",
        "url": "/blinky-stepper-02",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "4bf504b3.67f58c"
            ]
        ]
    },
    {
        "id": "4bf504b3.67f58c",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = global.get('deviceNameB')\nmsg.payload['script']['deviceType'] = global.get('deviceTypeB');\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 140,
        "wires": [
            [
                "138e7b8a.c86e04"
            ]
        ]
    },
    {
        "id": "138e7b8a.c86e04",
        "type": "subflow:966462d2.5b098",
        "z": "c4285970.3276d8",
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "6c85a296.a5d5fc",
        "type": "mqtt out",
        "z": "5541556.c1113ac",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "79250bf3.365cc4",
        "x": 950,
        "y": 560,
        "wires": []
    },
    {
        "id": "801b827a.43c2",
        "type": "mqtt in",
        "z": "5541556.c1113ac",
        "name": "Subscribe Settings",
        "topic": "+/+/+/setting",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "1e32c5e6.3af3fa"
            ]
        ]
    },
    {
        "id": "1e32c5e6.3af3fa",
        "type": "json",
        "z": "5541556.c1113ac",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "bbb5707c.ba64"
            ]
        ]
    },
    {
        "id": "a65b4e71.3e32a",
        "type": "file",
        "z": "5541556.c1113ac",
        "name": "Init Settings",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1050,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4e7989ec.d24338",
        "type": "inject",
        "z": "5541556.c1113ac",
        "name": "init 0.5 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": ".5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "f965fa36.d6be38"
            ]
        ]
    },
    {
        "id": "3459bdb9.c1c282",
        "type": "file in",
        "z": "5541556.c1113ac",
        "name": "Init Settings",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 650,
        "y": 340,
        "wires": [
            [
                "1ccafcce.b92003"
            ]
        ]
    },
    {
        "id": "1ccafcce.b92003",
        "type": "json",
        "z": "5541556.c1113ac",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 340,
        "wires": [
            [
                "df9b7fee.30ba2",
                "cc45237d.758ec"
            ]
        ]
    },
    {
        "id": "df9b7fee.30ba2",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Save initSettings in Memory",
        "func": "msg.payload.moveMotor.value = 0;\nflow.set('device', msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 340,
        "wires": []
    },
    {
        "id": "51433d24.d47bf4",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Make Pretty",
        "func": "var jsonPretty = JSON.stringify(msg.payload,null,2);\nvar filename = 'cube-A-settings.json';\nreturn {topic: msg.payload, payload:jsonPretty, 'filename':filename};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 140,
        "wires": [
            [
                "a65b4e71.3e32a"
            ]
        ]
    },
    {
        "id": "6ff83bc2.d084a4",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Settings Alarm Scan",
        "func": "scalarAlarmScan(msg.payload, 'setting');\nflow.set('device', msg.payload); \nflow.set('newSetting', 1); \nreturn msg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "51433d24.d47bf4"
            ]
        ]
    },
    {
        "id": "a41f1735.a3fe08",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Readings Alarm Scan",
        "func": "var device = flow.get('device');\ndevice.linkQuality.value     = global.get('linkQuality');\ndevice.signalLevel.value     = global.get('signalLevel');\nscalarAlarmScan(device, 'reading');\nvar newMsg = \n{\n    topic: global.get('project') + '/' + global.get(flow.get('cubeSettings').deviceType) + '/' + global.get(flow.get('cubeSettings').deviceName) + '/reading',\n    payload: device\n}\nreturn newMsg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 600,
        "wires": [
            [
                "161dafb2.f0fce",
                "6c85a296.a5d5fc"
            ]
        ]
    },
    {
        "id": "e9bc5044.cc768",
        "type": "link in",
        "z": "5541556.c1113ac",
        "name": "cube-01 Settings In",
        "links": [
            "9e56a59.12b4158",
            "353004af.30dfdc"
        ],
        "x": 35,
        "y": 200,
        "wires": [
            [
                "f2f43518.fe98a8"
            ]
        ]
    },
    {
        "id": "161dafb2.f0fce",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Split MQTT topic",
        "func": "var mqttArray = msg.topic.split('/');\nvar device = \n{\n    project     : mqttArray[0],\n    deviceType  : mqttArray[1],\n    name        : mqttArray[2],\n    prop        : mqttArray[3],\n};\nreturn {topic : msg.topic, payload:{topic:'readings', mqttDevice : device, payload:msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 950,
        "y": 640,
        "wires": [
            [
                "d5c61153.da795"
            ]
        ]
    },
    {
        "id": "d5c61153.da795",
        "type": "websocket out",
        "z": "5541556.c1113ac",
        "name": "/blinky-stepper-02/websocket",
        "server": "9ff152f7.d0768",
        "client": "",
        "x": 1240,
        "y": 640,
        "wires": []
    },
    {
        "id": "1180c1a5.a4bc6e",
        "type": "exec",
        "z": "5541556.c1113ac",
        "command": "pm2 restart red",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1000,
        "y": 260,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "26a9dfc6.b8304",
        "type": "mqtt in",
        "z": "5541556.c1113ac",
        "name": "Restart Tray",
        "topic": "+/+/+/restartTray",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "7966729d.25884c"
            ]
        ]
    },
    {
        "id": "7966729d.25884c",
        "type": "json",
        "z": "5541556.c1113ac",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "3aefc9ed.06b9e6"
            ]
        ]
    },
    {
        "id": "7eabeb1.428d614",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Check Restart Setting",
        "func": "if (msg.payload != 1) return null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 260,
        "wires": [
            [
                "1180c1a5.a4bc6e"
            ]
        ]
    },
    {
        "id": "f2f43518.fe98a8",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Filter Websocket MQTT like message",
        "func": "var msg1 = null;\nvar msg2 = null\nvar mqttArray = msg.topic.split('/');\nif (mqttArray[3] == 'restartTray')\n{\n    msg2 = msg;\n}\nelse\n{\n    msg1 = msg;\n}\n\nreturn [msg1,msg2];",
        "outputs": 2,
        "noerr": 0,
        "x": 230,
        "y": 200,
        "wires": [
            [
                "bbb5707c.ba64"
            ],
            [
                "3aefc9ed.06b9e6"
            ]
        ]
    },
    {
        "id": "777a0b05.527a24",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Make Pretty",
        "func": "return {topic: 'readFile', 'filename':flow.get('cubeSettings').filename};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 340,
        "wires": [
            [
                "3459bdb9.c1c282"
            ]
        ]
    },
    {
        "id": "bbb5707c.ba64",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Filter MQTT",
        "func": "var mqttArray = msg.topic.split('/');\nif (mqttArray[0] != global.get('project')) return null;\nif (mqttArray[1] != global.get(flow.get('cubeSettings').deviceType) ) return null;\nif (mqttArray[2] != global.get(flow.get('cubeSettings').deviceName) ) return null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 140,
        "wires": [
            [
                "6ff83bc2.d084a4"
            ]
        ]
    },
    {
        "id": "3aefc9ed.06b9e6",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Filter MQTT",
        "func": "var mqttArray = msg.topic.split('/');\nif (mqttArray[0] != global.get('project')) return null;\nif (mqttArray[1] != global.get(flow.get('cubeSettings').deviceType) ) return null;\nif (mqttArray[2] != global.get(flow.get('cubeSettings').deviceName) ) return null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "7eabeb1.428d614"
            ]
        ]
    },
    {
        "id": "cbe45495.b176e8",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Read Serial Handshake",
        "func": "if (flow.get('device') == undefined) return null;\nif (flow.get('newSetting') == undefined) return null;\nvar ib;\nvar dataView     = new DataView(new ArrayBuffer(4));\nvar newSettingDone = 0;\nvar cubeInit = 0;\n\nfor (ib = 0; ib < 4; ++ib)   dataView.setUint8(ib, msg.payload[0 * 4 + 3 - ib]);\ncubeInit = dataView.getInt32(0);\nfor (ib = 0; ib < 4; ++ib)   dataView.setUint8(ib, msg.payload[1 * 4 + 3 - ib]);\nnewSettingDone = dataView.getInt32(0);\n\nfor (ib = 0; ib < 4; ++ib)   dataView.setUint8(ib, msg.payload[2 * 4 + 3 - ib]);\nflow.get('device').nrevs.value = dataView.getFloat32(0);\nvar newSettingDoneMsg = {topic:'newSettingDone', payload:false} \nif (newSettingDone > 0) \n{\n    flow.set('newSetting',0);\n    flow.get('device').moveMotor.value = 0;\n    flow.get('device').resetNrevReading.value = 0;\n    newSettingDoneMsg.payload = true;\n}\nif(cubeInit == 1) \n{\n    flow.get('device').moveMotor.value = 0;\n    flow.set('newSetting',1);\n}\n\nreturn newSettingDoneMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 660,
        "wires": [
            [
                "242fa5ab.24511a",
                "9704bdf8.38e9a"
            ]
        ]
    },
    {
        "id": "242fa5ab.24511a",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "CreateSettings",
        "func": "var bufsize = 36;\nvar buffer = new ArrayBuffer(bufsize);\nvar settingsView = new DataView(buffer);\nvar device = flow.get('device');\nsettingsView.setInt32(0, flow.get('newSetting'), true);\nsettingsView.setInt32(4, device.moveMotor.value, true);\nsettingsView.setInt32(8, device.resetNrevReading.value, true);\nsettingsView.setInt32(12, device.noStepsToTurn.value, true);\nsettingsView.setInt32(16, device.stepDelayuS.value, true);\nsettingsView.setInt32(20, device.stayAwakeAfterRotation.value, true);\nsettingsView.setInt32(24, device.resolution.value, true);\nsettingsView.setInt32(28, device.delayAfterRotationmS.value, true);\nsettingsView.setInt32(32, device.loopDelay.value, true);\n\nreturn {topic:'settings',payload:Buffer.from(buffer)};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 740,
        "wires": [
            [
                "30a618ae.6424d8"
            ]
        ]
    },
    {
        "id": "4243eb5b.ce9724",
        "type": "serial in",
        "z": "5541556.c1113ac",
        "name": "",
        "serial": "ed364be7.e4b528",
        "x": 90,
        "y": 660,
        "wires": [
            [
                "cbe45495.b176e8"
            ]
        ]
    },
    {
        "id": "30a618ae.6424d8",
        "type": "serial out",
        "z": "5541556.c1113ac",
        "name": "",
        "serial": "ed364be7.e4b528",
        "x": 680,
        "y": 740,
        "wires": []
    },
    {
        "id": "cc45237d.758ec",
        "type": "debug",
        "z": "5541556.c1113ac",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 380,
        "wires": []
    },
    {
        "id": "962c9eb.f9b626",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Test Motor",
        "func": "flow.get('device').moveMotor.value = 1;\nflow.set('newSetting',1);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 920,
        "wires": []
    },
    {
        "id": "6581b541.e6f8cc",
        "type": "inject",
        "z": "5541556.c1113ac",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 920,
        "wires": [
            [
                "962c9eb.f9b626"
            ]
        ]
    },
    {
        "id": "9704bdf8.38e9a",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Check for new data",
        "func": "if (!msg.payload) return null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 600,
        "wires": [
            [
                "a41f1735.a3fe08"
            ]
        ]
    },
    {
        "id": "c3a51862.7d2e48",
        "type": "json",
        "z": "5541556.c1113ac",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 970,
        "y": 900,
        "wires": [
            [
                "687daeea.1c723"
            ]
        ]
    },
    {
        "id": "df1acf17.9766f",
        "type": "websocket in",
        "z": "5541556.c1113ac",
        "name": "/blinky-stepper-02/websocket",
        "server": "9ff152f7.d0768",
        "client": "",
        "x": 780,
        "y": 900,
        "wires": [
            [
                "c3a51862.7d2e48"
            ]
        ]
    },
    {
        "id": "687daeea.1c723",
        "type": "switch",
        "z": "5541556.c1113ac",
        "name": "topics",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sendSettingToMqtt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 900,
        "wires": [
            [
                "ac4d82a0.f80fb"
            ],
            [
                "325162d4.cca04e"
            ]
        ]
    },
    {
        "id": "17656d40.ed48b3",
        "type": "json",
        "z": "5541556.c1113ac",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 960,
        "wires": [
            [
                "95b24e9a.00ba1"
            ]
        ]
    },
    {
        "id": "ce1c7962.3aee08",
        "type": "mqtt in",
        "z": "5541556.c1113ac",
        "name": "Subscribe Ping",
        "topic": "+/+/+/ping",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 740,
        "y": 960,
        "wires": [
            [
                "17656d40.ed48b3"
            ]
        ]
    },
    {
        "id": "95b24e9a.00ba1",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Filter MQTT",
        "func": "var mqttArray = msg.topic.split('/');\nif (mqttArray[0] != global.get('project')) return null;\nif (mqttArray[1] != global.get(flow.get('cubeSettings').deviceType) ) return null;\nif (mqttArray[2] != global.get(flow.get('cubeSettings').deviceName) ) return null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 960,
        "wires": [
            [
                "325162d4.cca04e"
            ]
        ]
    },
    {
        "id": "325162d4.cca04e",
        "type": "link out",
        "z": "5541556.c1113ac",
        "name": "Ping Out",
        "links": [
            "ce4eb0d3.8d501"
        ],
        "x": 1335,
        "y": 960,
        "wires": []
    },
    {
        "id": "ce4eb0d3.8d501",
        "type": "link in",
        "z": "5541556.c1113ac",
        "name": "Ping In",
        "links": [
            "325162d4.cca04e"
        ],
        "x": 635,
        "y": 540,
        "wires": [
            [
                "a41f1735.a3fe08"
            ]
        ]
    },
    {
        "id": "ac4d82a0.f80fb",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "sendSettingToMqtt",
        "func": "return {\n    topic   : msg.payload.mqttMessage.topic, \n    payload : msg.payload.mqttMessage.payload, \n    userID  : msg.payload.userID };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1390,
        "y": 900,
        "wires": [
            [
                "353004af.30dfdc"
            ]
        ]
    },
    {
        "id": "353004af.30dfdc",
        "type": "link out",
        "z": "5541556.c1113ac",
        "name": "Webs Scoket Settings Out",
        "links": [
            "e9bc5044.cc768"
        ],
        "x": 1525,
        "y": 900,
        "wires": []
    },
    {
        "id": "82a3ad6e.8e328",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n    <div class='container' width=\"100%\">\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/blinky-stepper-01\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"100%\" align=\"center\">Blinky Stepper 01</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/blinky-stepper-02\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"100%\" align=\"center\">Blinky Stepper 02</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 650,
        "y": 240,
        "wires": [
            [
                "43723317.2defac"
            ]
        ]
    },
    {
        "id": "19310ace.c992d5",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Blinky-Stepper",
        "output": "str",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "c241b88d.b93c68"
            ]
        ]
    },
    {
        "id": "ef751ae9.e06be8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "JavaScript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 230,
        "y": 240,
        "wires": [
            [
                "19310ace.c992d5"
            ]
        ]
    },
    {
        "id": "c241b88d.b93c68",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "stairsYellow.png",
        "output": "str",
        "x": 510,
        "y": 240,
        "wires": [
            [
                "82a3ad6e.8e328"
            ]
        ]
    },
    {
        "id": "43723317.2defac",
        "type": "subflow:6a402d92.12d7c4",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 790,
        "y": 240,
        "wires": []
    },
    {
        "id": "78ae07b5.ba21c8",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "ef751ae9.e06be8"
            ]
        ]
    },
    {
        "id": "a855a806.16fa08",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Init flow variables",
        "func": "flow.set('newSetting',0);\nvar cubeSettings = \n{\n    filename : 'cube-A-settings.json',\n    deviceType : 'deviceTypeA',\n    deviceName : 'deviceNameA'\n}\nflow.set('cubeSettings',cubeSettings);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 340,
        "wires": [
            [
                "2635280b.22f548"
            ]
        ]
    },
    {
        "id": "f965fa36.d6be38",
        "type": "function",
        "z": "5541556.c1113ac",
        "name": "Init flow variables",
        "func": "flow.set('newSetting',0);\nvar cubeSettings = \n{\n    filename : 'cube-B-settings.json',\n    deviceType : 'deviceTypeB',\n    deviceName : 'deviceNameB'\n}\nflow.set('cubeSettings',cubeSettings);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 340,
        "wires": [
            [
                "777a0b05.527a24"
            ]
        ]
    }
]